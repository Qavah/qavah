{"version":3,"sources":["graphql.js","components/Header.jsx","App.jsx","components/Project.jsx","pages/Explorer.jsx","assets/puzzle.svg","components/Select.jsx","utils/cropImage.js","components/Report.jsx","pages/ProjectInfo.jsx","pages/Profile.jsx","index.js","utils/index.js"],"names":["notificationVar","makeVar","createClient","chainId","ApolloClient","uri","getNetwork","subgraph","cache","InMemoryCache","typePolicies","Query","fields","notification","read","ALL_PROJECTS","gql","PROJECT_INFO","PROFILE","Header","useCelo","connect","address","network","destroy","useReactiveVar","className","to","name","window","location","pathname","includes","onClick","href","target","rel","App","useParams","dapp","description","url","icon","ApolloProvider","client","Project","project","percentage","BigNumber","from","fundedAmount","mul","div","requestedAmount","toNumber","id","src","image","replace","alt","title","style","width","parseFloat","ethers","utils","formatUnits","toFixed","Explorer","_path","useQuery","onError","error","message","data","projects","map","p","i","_excluded","_extends","Object","assign","bind","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgPuzzle","_ref","svgRef","titleId","props","viewBox","fill","xmlns","ref","d","stroke","ForwardRef","Select","contribution","setContribution","requested","totalPieces","c","disabled","inputMode","onChange","e","value","min","height","createImage","Promise","resolve","reject","Image","addEventListener","setAttribute","getRadianAngle","degreeValue","Math","PI","rotateSize","rotation","rotRad","abs","cos","sin","getCroppedImg","imageSrc","pixelCrop","a","flip","horizontal","vertical","canvas","document","createElement","ctx","getContext","bBoxWidth","bBoxHeight","translate","rotate","scale","drawImage","getImageData","x","y","putImageData","toBlob","file","URL","createObjectURL","Report","userAddress","useContract","contract","useState","modal","setModal","useRef","rows","placeholder","methods","reportUser","current","send","Number","toString","console","ProjectInfo","create","projectId","navigate","useNavigate","balance","cUSD","fetchBalance","variables","skip","refetch","mode","setMode","intersecting","setIntersecting","refs","Array","React","createRef","img","setImg","amount","setAmount","setTitle","setDescription","setMessage","crop","setCrop","zoom","setZoom","croppedAreaPixels","setCroppedAreaPixels","useEffect","observer","IntersectionObserver","isIntersecting","dataset","index","filter","rootMargin","forEach","observe","disconnect","toClaim","sub","claimedAmount","funded","receiptsNb","collection","receipts","ranges","reduce","acc","curr","chosen","dataUrl","aspect","onCropChange","onCropComplete","_","objectFit","onZoomChange","matchAll","m","owner","findIndex","clipPath","match","opacity","transition","htmlFor","type","onFileSelected","accept","step","donators","onMouseOver","onMouseOut","creator","toLowerCase","slice","Date","createdAt","toLocaleDateString","r","donator","timestamp","undefined","day","month","reports","strokeWidth","isNaN","trim","croppedImage","ipfs","fetch","then","blob","add","path","query","createProject","escapeHtml","parseUnits","fetchCreateProject","cached","cachedMyProjects","fetchPolicy","setTimeout","editProject","fetchEditProject","readQuery","cachedUpdatedAt","updatedAt","claimProjectFunds","fetchClaimProjectFunds","cachedClaimedAmount","navigator","clipboard","writeText","origin","donation","approve","getContract","donateToProject","fetchDonateToProject","cachedMyDonations","Profile","dataImgs","setDataImgs","receipt","reader","FileReader","onerror","onload","result","readAsDataURL","dataImg","link","split","join","container","getElementById","createRoot","render","StrictMode","element","contractAddresses","rpcUrl","explorer","ipfsClient","host","port","protocol","headers","authorization","Buffer","kit","setContract","setCUSD","setBalance","useCallback","erc20","balanceOf","connection","web3","eth","Contract","abi","usdTokenAddress","CUSD","event","selectedFile","files","body","appendChild","ditherjs","DitherJS","palette","algorithm","dither","querySelector","imgData","canvas1","ctx1","toDataURL","unsafe","replaceAll"],"mappings":"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","file":"static/js/main.a0e13ed5.chunk.js","sourcesContent":["import { ApolloClient, InMemoryCache, gql, makeVar } from '@apollo/client'\nimport { getNetwork } from './utils'\n\nexport const notificationVar = makeVar('')\n\nexport const createClient = chainId => new ApolloClient({\n  uri: getNetwork(chainId)?.subgraph,\n  cache: new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          notification: { read: () => notificationVar() },\n        },\n      },\n    },\n  }),\n})\n\nexport const ALL_PROJECTS = gql`\n  query {\n    projects(\n      orderBy: createdAt\n      orderDirection: desc\n      where: { reports_lt: 2 }\n    ) {\n      id\n      creator {\n        id\n      }\n      title\n      requestedAmount\n      description\n      image\n      fundedAmount\n      claimedAmount\n      donators {\n        id\n      }\n      createdAt\n      collection {\n        id\n      }\n    }\n  }\n`\n\nexport const PROJECT_INFO = gql`\n  query($projectId: ID!) {\n    project(id: $projectId) {\n      id\n      creator {\n        id\n      }\n      title\n      requestedAmount\n      description\n      image\n      fundedAmount\n      claimedAmount\n      donators {\n        id\n      }\n      createdAt\n      updatedAt\n      collection {\n        id\n        receipts(orderBy: timestamp) {\n          id\n          name\n          amount\n          image\n          timestamp\n          tokenId\n          donator {\n            id\n            reports\n          }\n          message\n        }\n      }\n      createdAt\n    }\n  }\n`\n\nexport const PROFILE = gql`\n  query($userAddress: ID!) {\n    projects(\n      where: {creator: $userAddress}\n      orderBy: createdAt\n      orderDirection: desc\n    ) {\n      id\n      title\n      requestedAmount\n      description\n      image\n      fundedAmount\n    }\n    receipts(\n      where: {donator: $userAddress}\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      id\n      description\n      image\n      project {\n        id\n        image\n      }\n    }\n  }\n`","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { useCelo } from '@celo/react-celo'\nimport { useReactiveVar } from '@apollo/client'\nimport { notificationVar } from '../graphql'\n\nfunction Header () {\n  const { connect, address, network, destroy } = useCelo()\n  const notification = useReactiveVar(notificationVar)\n  return (\n    <>\n      <header className='header'>\n        <Link to='' className='a logo plain'>\n          <h1 className='h1'>qavah</h1>\n          <span className=\"network\">{network.name}</span>\n        </Link>\n        {address ? (\n          <>\n          {window.location.pathname.includes('/user/' + address) ? (\n            <button className=\"a\" onClick={destroy}>Log out</button>\n          ) : (\n            <Link to={`user/${address}`} className='a'>My account</Link>\n          )}\n          </>\n        ) : (\n          <button className='a' onClick={connect}>Connect wallet</button>\n        )}\n        <a className='a' href=\"https://github.com/Qavah/qavah/blob/main/docs/FAQ.md\" target=\"_blank\" rel=\"noopener noreferrer\">\n          FAQ\n        </a>\n      </header>\n      {notification && (\n        <div className='Message'>\n          <span>{notification}</span>\n          <button className='a' onClick={() => notificationVar('')}>x</button>\n        </div>\n      )}\n    </>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport { Outlet, useParams } from 'react-router-dom'\nimport { CeloProvider } from '@celo/react-celo'\nimport { ApolloProvider } from '@apollo/client'\nimport { createClient } from './graphql'\nimport { getNetwork } from './utils'\nimport Header from './components/Header'\nimport '@celo/react-celo/lib/styles.css'\nimport './index.scss'\n\nfunction App () {\n  const { chainId } = useParams()\n  return (\n    <CeloProvider\n      dapp={{\n        name: 'Qavah',\n        description: 'Decentralized and free-of-charge crowdfunding platform',\n        url: 'https://qavah.github.io/qavah',\n        icon: 'https://qavah.github.io/qavah/favicon.png',\n      }}\n      network={{\n        ...getNetwork(chainId),\n        chainId: +chainId,\n      }}\n    >\n      <ApolloProvider client={createClient(chainId)}>\n        <main>\n          <Header />\n          <Outlet />\n        </main>\n      </ApolloProvider>\n    </CeloProvider>\n  )\n}\n\nexport default App\n","import { Link, useParams } from 'react-router-dom'\nimport { ethers, BigNumber } from 'ethers'\n\nconst Project = ({ project }) => {\n  const { chainId } = useParams()\n  const percentage = BigNumber.from(project.fundedAmount).mul?.(100).div(project.requestedAmount).toNumber()\n  return (\n    <Link to={`/${chainId}/${project.id}`} className='Project'>\n      <img className='img image' src={project.image.replace('ipfs.infura.io', 'qavah.infura-ipfs.io')} alt='' />\n      <div className='content'>\n        <div className='title'>\n          <h3 className='h3'>{project.title}</h3>\n        </div>\n        <p className='description'>{project.description}</p>\n        <div className='bottom'>\n          <div>\n            <div className='progress'><div style={{ width: percentage + '%' }} /></div>\n            <span className='amounts'>{percentage}% funded of <b>{parseFloat(ethers.utils.formatUnits(project.requestedAmount, 18)).toFixed(2)} cUSD</b></span>\n          </div>\n        </div>\n      </div>\n    </Link>\n  )\n}\n\nexport default Project\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { ALL_PROJECTS, notificationVar } from '../graphql'\nimport Project from '../components/Project'\n\nfunction Explorer () {\n  const { data: { projects = [] } = {} } = useQuery(ALL_PROJECTS, {\n    onError: error => notificationVar(error.message),\n  })\n  return (\n    <div className='Explorer'>\n      <h2 className='h2'>All campaigns</h2>\n      <div className=\"projects\">\n        {projects.map((p, i) => (\n          <Project project={p} key={p.id} />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default Explorer\n","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgPuzzle(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 12 12\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M11.3 7v-.8L9.2 4.5v-.3l1.3-.4.2-.8L9 1.3l-.8.2-.4 1.2-.3.1L5.8.7h-.9L3.5 2.2l.2.6 1.2.4.3.7-1.3 1.3-.7-.3-.4-1.2-.6-.2L.7 4.9v.9l2.1 1.7v.3l-1.3.4-.2.8L3 10.7l.8-.2.4-1.2.3-.1 1.7 2.1h.9l1.4-1.5-.2-.6-1.2-.4-.3-.7 1.3-1.3.7.3.4 1.2.6.2 1.5-1.4Z\",\n    stroke: \"currentColor\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgPuzzle);\nexport default __webpack_public_path__ + \"static/media/puzzle.a1cc5e0e.svg\";\nexport { ForwardRef as ReactComponent };","import { ReactComponent as Puzzle } from '../assets/puzzle.svg'\n\nconst Select = ({ contribution, setContribution, percentage, requested, totalPieces }) => (\n  <>\n    <button\n      className='button minus'\n      onClick={() => setContribution((c) => +c - 1)}\n      disabled={contribution <= 0}\n    >-</button>\n    <input\n      className='input'\n      name='amount'\n      inputMode='numeric'\n      onChange={(e) => setContribution(e.target.value)}\n      value={contribution}\n      min={0}\n    />\n    <Puzzle width={16} height={16} />\n    <button\n      className='button plus'\n      onClick={() => setContribution((c) => +c + 1)}\n      disabled={contribution >= totalPieces - percentage}\n    >+</button>\n    <span>\n      ({contribution > 0 ? `${((contribution * requested) / totalPieces).toFixed(2)} cUSD` : '0 cUSD'})\n    </span>\n  </>\n)\n\nexport default Select","export const createImage = (url) =>\n  new Promise((resolve, reject) => {\n    const image = new Image()\n    image.addEventListener('load', () => resolve(image))\n    image.addEventListener('error', (error) => reject(error))\n    image.setAttribute('crossOrigin', 'anonymous') // needed to avoid cross-origin issues on CodeSandbox\n    image.src = url\n  })\n\nexport function getRadianAngle(degreeValue) {\n  return (degreeValue * Math.PI) / 180\n}\n\n/**\n * Returns the new bounding area of a rotated rectangle.\n */\nexport function rotateSize(width, height, rotation) {\n  const rotRad = getRadianAngle(rotation)\n\n  return {\n    width:\n      Math.abs(Math.cos(rotRad) * width) + Math.abs(Math.sin(rotRad) * height),\n    height:\n      Math.abs(Math.sin(rotRad) * width) + Math.abs(Math.cos(rotRad) * height),\n  }\n}\n\n/**\n * This function was adapted from the one in the ReadMe of https://github.com/DominicTobias/react-image-crop\n */\nexport default async function getCroppedImg(\n  imageSrc,\n  pixelCrop,\n  rotation = 0,\n  flip = { horizontal: false, vertical: false }\n) {\n  const image = await createImage(imageSrc)\n  const canvas = document.createElement('canvas')\n  const ctx = canvas.getContext('2d')\n\n  if (!ctx) {\n    return null\n  }\n\n  const rotRad = getRadianAngle(rotation)\n\n  // calculate bounding box of the rotated image\n  const { width: bBoxWidth, height: bBoxHeight } = rotateSize(\n    image.width,\n    image.height,\n    rotation\n  )\n\n  // set canvas size to match the bounding box\n  canvas.width = bBoxWidth\n  canvas.height = bBoxHeight\n\n  // translate canvas context to a central location to allow rotating and flipping around the center\n  ctx.translate(bBoxWidth / 2, bBoxHeight / 2)\n  ctx.rotate(rotRad)\n  ctx.scale(flip.horizontal ? -1 : 1, flip.vertical ? -1 : 1)\n  ctx.translate(-image.width / 2, -image.height / 2)\n\n  // draw rotated image\n  ctx.drawImage(image, 0, 0)\n\n  // croppedAreaPixels values are bounding box relative\n  // extract the cropped image using these values\n  const data = ctx.getImageData(\n    pixelCrop.x,\n    pixelCrop.y,\n    pixelCrop.width,\n    pixelCrop.height\n  )\n\n  // set canvas width to final desired crop size - this will clear existing context\n  canvas.width = pixelCrop.width\n  canvas.height = pixelCrop.height\n\n  // paste generated rotate image at the top left corner\n  ctx.putImageData(data, 0, 0)\n\n  // As Base64 string\n  // return canvas.toDataURL('image/jpeg');\n\n  // As a blob\n  return new Promise((resolve, reject) => {\n    canvas.toBlob((file) => {\n      resolve(URL.createObjectURL(file))\n    }, 'image/jpeg')\n  })\n}\n","import React, { useState, useRef } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { notificationVar } from '../graphql'\nimport { useContract } from '../utils'\n\nconst Report = ({ userAddress }) => {\n  const { chainId } = useParams()\n  const { address, contract } = useContract(chainId)\n  const [modal, setModal] = useState(false)\n  const ref = useRef()\n  return (\n    <>\n      {modal === 'REPORT' && (\n        <aside className='overlay'>\n          <aside className='Modal'>\n            <div className='Modal__top'>\n              <h3>Are you sure to report this user?</h3>\n            </div>\n            <textarea ref={ref} className='textarea' rows='3' placeholder='Explain why (optional)' />\n            <div className='Modal__bottom'>\n              <button\n                className='button grow primary'\n                onClick={async () => {\n                  try {\n                    notificationVar('Please confirm on your wallet…')\n                    await contract.methods.reportUser(\n                      userAddress,\n                      ref.current.value,\n                    ).send({ from: address, chainId: '0x' + Number(chainId).toString(16) })\n                    notificationVar('User successfully reported.')\n                    setModal('')\n                  } catch (error) {\n                    console.error(error)\n                    notificationVar(error.message)\n                  }\n                }}\n              >\n                Report\n              </button>\n              <button className='button grow' onClick={() => setModal('')}>\n                Back\n              </button>\n            </div>\n          </aside>\n        </aside>\n      )}\n      <svg onClick={() => setModal('REPORT')} className='button icon' height={35} xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'>\n        <path fill='none' d='M0 0h24v24H0z'/><path fill='currentColor' d='M5 16v6H3V3h9.382a1 1 0 0 1 .894.553L14 5h6a1 1 0 0 1 1 1v11a1 1 0 0 1-1 1h-6.382a1 1 0 0 1-.894-.553L12 16H5zM5 5v9h8.236l1 2H19V7h-6.236l-1-2H5z'/>\n      </svg>\n    </>\n  )\n}\n\nexport default Report","import React, { useRef, useEffect, useState } from 'react'\nimport { Link, useParams, useNavigate } from 'react-router-dom'\nimport { useQuery } from '@apollo/client'\nimport { useCelo } from '@celo/react-celo'\nimport { BigNumber, ethers } from 'ethers'\nimport { getContract, useContract } from '../utils'\nimport { PROJECT_INFO, ALL_PROJECTS, notificationVar } from '../graphql'\nimport { ReactComponent as Puzzle } from '../assets/puzzle.svg'\nimport Select from '../components/Select'\nimport Cropper from 'react-easy-crop'\nimport getCroppedImg from '../utils/cropImage'\nimport Report from '../components/Report'\nimport { ipfs, onFileSelected, escapeHtml } from '../utils'\n\nfunction ProjectInfo ({ create = false }) {\n  const { chainId, projectId } = useParams()\n  const navigate = useNavigate()\n  const { connect, destroy } = useCelo()\n  const { address, contract, balance, cUSD, fetchBalance } = useContract(chainId)\n\n  const { data: { project } = {}, refetch, client } = useQuery(PROJECT_INFO, {\n    variables: { projectId },\n    onError: error => notificationVar(error.message),\n    skip: create,\n  })\n\n  const [ modal, setModal ] = useState('')\n  const [ mode, setMode ] = useState(create ? 'CREATE' : '')\n  const [ intersecting, setIntersecting ] = useState([])\n  const refs = useRef([ ...Array(101) ].map(() => React.createRef()))\n  const [ contribution, setContribution ] = useState(0)\n\n  const [img, setImg] = useState({})\n  const [ amount, setAmount ] = useState('')\n  const [ title, setTitle ] = useState('')\n  const [ description, setDescription ] = useState('')\n  const [ message, setMessage ] = useState('')\n  const [crop, setCrop] = useState({ x: 0, y: 0 })\n  const [zoom, setZoom] = useState(1)\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState(null)\n\n  useEffect(() => {\n    if (project) {\n      if (project.fundedAmount !== project.requestedAmount) {\n        setContribution(1)\n      }\n      setAmount(parseFloat(ethers.utils.formatUnits(project.requestedAmount, 18)).toFixed(2))\n      setTitle(project.title)\n      setDescription(project.description)\n      const observer = new IntersectionObserver(\n        ([{ isIntersecting, target }]) => {\n          if (isIntersecting) {\n            setIntersecting((x) => [...x, +target.dataset.index])\n          } else {\n            setIntersecting((x) => x.filter((i) => i !== +target.dataset.index))\n          }\n        },\n        { rootMargin: '-40%' }\n      )\n      refs.current.forEach((ref) => ref.current && observer.observe(ref.current))\n      return () => observer.disconnect()\n    }\n  }, [ project ])\n\n  if (!project && !mode) return null\n  \n  const totalPieces = chainId === '1337' ? 25 : 100\n  const percentage = project && BigNumber.from(project.fundedAmount).mul?.(totalPieces).div(project.requestedAmount).toNumber()\n  const toClaim = project && parseFloat(ethers.utils.formatUnits(BigNumber.from(project.fundedAmount).sub?.(project.claimedAmount) || 0, 18)).toFixed(2)\n  const funded = project && parseFloat(ethers.utils.formatUnits(project.fundedAmount, 18)).toFixed(2)\n  const requested = project && parseFloat(ethers.utils.formatUnits(project.requestedAmount, 18)).toFixed(2)\n\n  const receiptsNb = project && project.collection.receipts.length\n  const ranges = project && project.collection.receipts.reduce((acc, curr) => [\n    ...acc, (acc[acc.length - 1] || 0) + (curr.amount / requested) * totalPieces,\n  ], [])\n  const chosen = project && intersecting[intersecting.length - 1]\n\n  return (\n    <div className='ProjectInfo'>\n      {!mode ? (\n        project.collection.receipts.length ? (\n          <svg className='svg' viewBox='0 0 320 180'>\n            <defs>\n              <image id='a' href={project.image.replace('ipfs.infura.io', 'qavah.infura-ipfs.io')} width='320' height='180' />\n            </defs>\n            {[ ...project.collection.receipts[receiptsNb - 1].image.matchAll(/<use.*?\\/>/g) ].map((m, i) => {\n              const owner = ranges.findIndex((x) => i < x)\n              return (\n                <use\n                  key={'use' + i}\n                  href='#a'\n                  clipPath={m[0].match(/clip-path='(.*?)'/)[1]}\n                  opacity={\n                    chosen > -1\n                      ? chosen === owner\n                        ? 1\n                        : owner > -1\n                          ? 0.3\n                          : 0.1\n                      : owner > -1\n                        ? 1\n                        : 1\n                  }\n                  style={{ transition: '0.3s' }}\n                />\n              )\n            })}\n          </svg>\n        ) : (\n          <img src={project.image.replace('ipfs.infura.io', 'qavah.infura-ipfs.io')} alt='' />\n        )\n      ) : (\n        <aside className='container'>\n          <div className='cropper'>\n            <Cropper\n              image={img.dataUrl || project?.image.replace('ipfs.infura.io', 'qavah.infura-ipfs.io')}\n              aspect={16 / 9}\n              crop={crop}\n              onCropChange={setCrop}\n              onCropComplete={(_, croppedAreaPixels) => setCroppedAreaPixels(croppedAreaPixels)}\n              objectFit={img.width / img.height < 16 / 9 ? 'horizontal-cover' : 'vertical-cover'}\n              zoom={zoom}\n              onZoomChange={setZoom}\n            />\n          </div>\n        </aside>\n      )}\n      <div className='info'>\n        {mode && (\n          <div className='banner'>\n            <label className='button secondary upload' htmlFor='image'>\n              {(img.height || project?.image) ? 'Replace' : 'Upload'} image\n              <input id='image' className='input' type='file' name='image' onChange={e => onFileSelected(e, setImg)} accept='image/*' />\n            </label>\n            <span className='requested'>\n              <input\n                className='input'\n                name='requested'\n                type='number'\n                step='1'\n                min='10'\n                placeholder='100'\n                inputMode='numeric'\n                disabled={requested}\n                value={amount}\n                onChange={e => setAmount(e.target.value)}\n              />\n            </span>    \n          </div>\n        )}\n        {!mode ? (\n          <h3 className='h3'>\n            <span>{project.title}</span>\n          </h3>\n        ) : (\n          <textarea\n            className='textarea editable'\n            name='title'\n            placeholder='Your project title'\n            rows='2'\n            value={title}\n            onChange={e => setTitle(e.target.value)}\n          />\n        )}\n        {!mode && (\n          <div className='summary'>\n            <span className='amounts'>\n              <b>{funded} cUSD</b> funded / <b>{requested}</b>\n            </span>\n            <span>\n              by <b>{project.donators.length} donators</b>\n            </span>\n          </div>\n        )}\n        {!mode ? (\n           <p className='description'>\n            <span>{project.description}</span>\n          </p>\n        ) : (\n          <textarea\n            className='textarea editable'\n            name='description'\n            placeholder='A more detailed description…'\n            rows='10'\n            value={description}\n            onChange={e => setDescription(e.target.value)}\n          />\n        )}\n      </div>\n      {!mode && (\n        <div className='timeline'>\n          <div className='h4'>\n            Contributions ({project.collection.receipts.length})\n            <span>{100 * percentage / totalPieces}% raised</span>\n          </div>\n          <ul className='ul'>\n            <li\n              className='li'\n              ref={refs.current[100]}\n              data-index={100}\n              style={{ opacity: chosen === 100 ? 1 : 0.5 }}\n              onMouseOver={() => setIntersecting([100])}\n              onMouseOut={() => setIntersecting([])}\n            >\n              <div className='label'>\n                <h5>\n                  <Link to={`/${chainId}/user/${project.creator.id.toLowerCase()}`} className='a plain'>\n                    {+address === +project.creator.id ? 'You' : `${project.creator.id.slice(0, 6)}…${project.creator.id.slice(-2)}`}\n                  </Link>\n                </h5>\n                <span className='small'>\n                  {new Date(project.createdAt * 1000).toLocaleDateString()}\n                </span>\n              </div>\n              <div className='label'>\n                <span>created the campaign</span>\n                <span className='small'></span>\n              </div>\n            </li>\n            {project.collection.receipts.map((r, i) => (\n              <li\n                ref={refs.current[i]}\n                data-index={i}\n                className='li donation'\n                style={{ opacity: chosen === i ? 1 : 0.5 }}\n                key={`${i}_${r.id}`}\n                onMouseOver={() => setIntersecting([i])}\n                onMouseOut={() => setIntersecting([])}\n              >\n                <div className='label'>\n                  <h5>\n                    <Link\n                      to={`/${chainId}/user/${r.donator.id.toLowerCase()}`}\n                      className='a plain'\n                    >\n                      {+address === +r.donator.id ? 'You' : `${r.donator.id.slice(0, 6)}…${r.donator.id.slice(-2)}`}\n                    </Link>\n                  </h5>\n                  <span className='small'>\n                    {new Date(r.timestamp * 1000).toLocaleDateString(undefined, { day: 'numeric', month: 'numeric' })}\n                  </span>\n                </div>\n                <div className='label'>\n                  <span>\n                    {' '}contributed <b>{r.amount} cUSD</b>\n                  </span>\n                  <span className='small'>\n                    &mdash;{' '}{r.donator.reports ? '(…)' : r.message}\n                  </span>\n                </div>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n      {!project || +address === +project.creator.id ? (\n        <div className='admin'>\n          {!mode ? (\n            <>\n              {address ? (\n                <button\n                  disabled={!+toClaim}\n                  className='button claim primary'\n                  onClick={async () => {\n                    try {\n                      notificationVar('Please confirm on your wallet…')\n                      await contract.methods.claimProjectFunds(\n                        project.id\n                      ).send({ from: address, chainId: '0x' + Number(chainId).toString(16) })\n                      notificationVar('Funds successfully claimed!')\n                      const fetchClaimProjectFunds = async () => {\n                        const cached = client.readQuery({ query: PROJECT_INFO, variables: { projectId } })\n                        const cachedClaimedAmount = cached.project.claimedAmount\n                        const { data } = await refetch()\n                        if (cachedClaimedAmount === data.project.claimedAmount) {\n                          await new Promise(resolve => setTimeout(resolve, 2000))\n                          await fetchClaimProjectFunds()\n                        }\n                      }\n                      await fetchClaimProjectFunds()\n                      fetchBalance(cUSD)\n                    } catch (error) {\n                      console.error(error)\n                      notificationVar(error.message)\n                      if (error.message === 'unknown account') {\n                        await destroy()\n                        notificationVar('Sorry, you must reconnect!')\n                      }\n                    }\n                  }}\n                >\n                  Claim {toClaim} cUSD\n                </button>\n              ) : (\n                <button className='button primary' onClick={connect}>\n                  Connect wallet\n                </button>\n              )}\n              <button className='button' onClick={() => setMode('EDIT')}>\n                Edit\n              </button>\n            </>\n          ) : (\n            <>\n              {mode === 'EDIT' && (\n                <button onClick={() => setMode('')} className='button'>\n                  Cancel\n                </button>\n              )}\n              {address ? (\n                <button\n                  disabled={(!project && !img.dataUrl) || !title.trim() || !description.trim() || amount < 10}\n                  className='button primary'\n                  onClick={async () => {\n                    try {\n                      let url = project?.image\n                      if (img.dataUrl) {\n                        const croppedImage = await getCroppedImg(img.dataUrl, croppedAreaPixels, 0)\n                        const { path } = await ipfs.add(await fetch(croppedImage).then(r => r.blob()))\n                        url = `https://qavah.infura-ipfs.io/ipfs/${path}`\n                      }\n                      notificationVar('Please confirm on your wallet…')\n                      if (mode === 'CREATE') {\n                        client.query({ query: ALL_PROJECTS })\n                        await contract.methods.createProject(\n                          escapeHtml(title.trim()),\n                          description.trim(),\n                          ethers.utils.parseUnits(amount, 18),\n                          url,\n                        ).send({ from: address, chainId: '0x' + Number(chainId).toString(16) })\n                        notificationVar('Campaign successfully created!')\n                        const fetchCreateProject = async () => {\n                          const { data: cached } = await client.query({ query: ALL_PROJECTS })\n                          const cachedMyProjects = cached.projects.filter(p => +p.creator.id === +address).length\n                          const { data } = await client.query({ query: ALL_PROJECTS, fetchPolicy: 'network-only' })\n                          if (cachedMyProjects === data.projects.filter(p => +p.creator.id === +address).length) {\n                            await new Promise(resolve => setTimeout(resolve, 2000))\n                            await fetchCreateProject()\n                          }\n                        }\n                        await fetchCreateProject()\n                        navigate(`/${chainId}`)\n                      } else {\n                        await contract.methods.editProject(\n                          project.id,\n                          escapeHtml(title.trim()),\n                          description.trim(),\n                          url,\n                        ).send({ from: address, chainId: '0x' + Number(chainId).toString(16) })\n                        notificationVar('Project successfully updated!')\n                        const fetchEditProject = async () => {\n                          const cached = client.readQuery({ query: PROJECT_INFO, variables: { projectId } })\n                          const cachedUpdatedAt = cached.project.updatedAt\n                          const { data } = await refetch()\n                          if (cachedUpdatedAt === data.project.updatedAt) {\n                            await new Promise(resolve => setTimeout(resolve, 2000))\n                            await fetchEditProject()\n                          }\n                        }\n                        await fetchEditProject()\n                        setMode('')\n                      }\n                    } catch (error) {\n                      console.error(error)\n                      notificationVar(error.message)\n                      if (error.message === 'unknown account') {\n                        await destroy()\n                        notificationVar('Sorry, you must reconnect!')\n                      }\n                    }\n                  }}\n                >\n                  {mode === 'CREATE' ? 'Create campaign' : 'Save'}\n                </button>\n              ) : (\n                <button className='button primary' onClick={connect}>\n                  Connect wallet\n                </button>\n              )}\n            </>\n          )}\n        </div>\n      ) : (\n        <div className='contribute'>\n          <div className='h4'>\n            How can I help?\n            <span>\n              {totalPieces - percentage}{' '}\n              <Puzzle height={16} fill='rgba(97, 31, 105, 0.7)' strokeWidth={0} />\n              left\n            </span>\n          </div>\n          <main>\n            <div className='interact'>\n              <b>Give to this campaign</b>\n              <Select\n                contribution={contribution}\n                setContribution={setContribution}\n                percentage={percentage}\n                requested={requested}\n                totalPieces={totalPieces}\n              />\n              <div className='cta'>\n                <button\n                  className='button primary donate'\n                  disabled={\n                    isNaN(contribution) ||\n                    contribution <= 0 ||\n                    contribution > totalPieces - percentage\n                  }\n                  onClick={() => setModal('DONATE')}\n                >\n                  Donate now\n                </button>\n              </div>\n            </div>\n          </main>\n        </div>\n      )}\n      {!mode && (\n        <div className='contribute'>\n          <h5 className='h5'>Share this campaign</h5>\n          <div className='share'>\n            <button\n              onClick={() => {\n                navigator.clipboard.writeText(`${window.location.origin}/${chainId}/${project.id}`)\n                notificationVar('Link copied!')\n              }}\n              className='button secondary'\n            >Copy link</button>\n            {+address !== +project.creator.id && (\n              <Report userAddress={project?.creator.id} />\n            )}\n          </div>\n        </div>\n      )}\n      {modal === 'DONATE' && (\n        <aside className='overlay'>\n          <aside className='Modal'>\n            <div className='Modal__top'>\n              <h3 className='h5'>Are you sure?</h3>\n              <span>\n                Current balance: <b>{address ? balance : '…'} cUSD</b>\n              </span>\n            </div>\n            <div className='interact'>\n              <Select\n                contribution={contribution}\n                setContribution={setContribution}\n                percentage={percentage}\n                requested={requested}\n                totalPieces={totalPieces}\n              />\n            </div>\n            <textarea\n              className='textarea'\n              rows='3'\n              placeholder='Leave a message (optional)'\n              value={message}\n              onChange={e => setMessage(e.target.value)}\n            />\n            {address && (\n              <div className='Modal__warning'>\n                {balance < contribution * requested / totalPieces\n                  ? <span>Uh-oh, your balance is not high enough :/</span>\n                  : (isNaN(contribution) || contribution <= 0)\n                    ? <span>Looks like it's not a valid amount :/</span>\n                    : contribution > totalPieces - percentage\n                      ? <span>Sorry, there is only {totalPieces - percentage} pieces left :/</span>\n                      : null}\n              </div>\n            )}\n            <div className='Modal__bottom'>\n              <button className='button' onClick={() => setModal('')}>\n                Back\n              </button>\n              {address ? (\n                <button\n                  className='button grow primary'\n                  disabled={\n                    balance < contribution * requested / totalPieces ||\n                    isNaN(contribution) ||\n                    contribution <= 0 ||\n                    contribution > totalPieces - percentage\n                  }\n                  onClick={async () => {\n                    try {\n                      notificationVar('Please approve on your wallet… (1/2)')\n                      const donation = BigNumber.from(project.requestedAmount).mul(contribution).div(totalPieces)\n                      await cUSD.methods.approve(\n                        getContract(chainId),\n                        donation.toString(),\n                      ).send({ from: address, chainId: '0x' + Number(chainId).toString(16) })\n                      notificationVar('Please confirm on your wallet… (2/2)')\n                      await contract.methods.donateToProject(\n                        project.id,\n                        donation.toString(),\n                        escapeHtml(message),\n                      ).send({ from: address, chainId: '0x' + Number(chainId).toString(16) })\n                      notificationVar('Donation successfully sent!')\n                      const fetchDonateToProject = async () => {\n                        const cached = client.readQuery({ query: PROJECT_INFO, variables: { projectId } })\n                        const cachedMyDonations = cached.project.collection.receipts.filter(r => +r.donator.id === +address).length\n                        const { data } = await refetch()\n                        if (cachedMyDonations === data.project.collection.receipts.filter(r => +r.donator.id === +address).length) {\n                          await new Promise(resolve => setTimeout(resolve, 2000))\n                          await fetchDonateToProject()\n                        }\n                      }\n                      await fetchDonateToProject()\n                      setModal('')\n                      fetchBalance(cUSD)\n                    } catch (error) {\n                      console.error(error)\n                      notificationVar(error.message)\n                      if (error.message === 'unknown account') {\n                        await destroy()\n                        notificationVar('Sorry, you must reconnect!')\n                      }\n                    }\n                  }}\n                >\n                  {balance < contribution * requested / totalPieces ||\n                    isNaN(contribution) ||\n                    contribution <= 0 ||\n                    contribution > totalPieces - percentage\n                  ? 'Give'\n                  : `Give ${(contribution * requested / totalPieces).toFixed(2)} cUSD`}\n                </button>\n              ) : (\n                <button className='button grow primary' onClick={connect}>\n                  Connect wallet\n                </button>\n              )}\n            </div>\n          </aside>\n        </aside>\n      )}\n    </div>\n  )\n}\n\nexport default ProjectInfo\n","import React, { useState, useEffect } from 'react'\nimport { Link, useParams } from 'react-router-dom'\nimport { useQuery } from '@apollo/client'\nimport { PROFILE, notificationVar } from '../graphql'\nimport { useContract } from '../utils'\nimport Project from '../components/Project'\nimport Report from '../components/Report'\n\nfunction Profile () {\n  const { chainId, userAddress } = useParams()\n  const { address, balance } = useContract(chainId)\n\n  const { data: { receipts = [], projects = [] } = {} } = useQuery(PROFILE, {\n    variables: { userAddress },\n    onError: error => notificationVar(error.message),\n  })\n  const [dataImgs, setDataImgs] = useState({})\n\n  useEffect(() => {\n    setTimeout(async () => {\n      // if (window.ReactNativeWebView) {\n        for (const receipt of receipts) {\n          const blob = await fetch(receipt.project.image.replace('ipfs.infura.io', 'qavah.infura-ipfs.io')).then(r => r.blob())\n          const dataImg = await new Promise((resolve, reject) => {\n            const reader = new FileReader()\n            reader.onerror = reject\n            reader.onload = () => resolve(reader.result)\n            reader.readAsDataURL(blob)\n          })\n          setDataImgs(dataImgs => ({ ...dataImgs, [receipt.project.id]: dataImg }))\n        }\n      // }\n    })\n  }, [ userAddress, receipts ])\n\n  return (\n    <div className='Profile'>\n      <div className='top'>\n        <h1>\n          {userAddress.slice(0, 6)}…{userAddress.slice(-2)}\n          {+userAddress !== +address && '’s'}\n        </h1>\n        {+userAddress !== +address ? (\n          <Report userAddress={userAddress} />\n        ) : (\n          <span>\n            Current balance:<br />\n            <b>{balance} cUSD</b>\n          </span>\n        )}\n      </div>\n      <div className='campaigns'>\n        <h2 className='h2'>\n          {+userAddress === +address ? 'Your campaigns' : 'Created campaigns'}\n          <span>({projects.length})</span>\n        </h2>\n        <div className='projects'>\n          {projects.map(p => (\n            <Project project={p} key={p.id} />\n          ))}\n          {+userAddress === +address && (\n            <Link to={`/${chainId}/new`} className='new'>\n              <div>\n                <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' height={18}><path fill='none' d='M0 0h24v24H0z'/><path fill='currentColor' d='M11 11V5h2v6h6v2h-6v6h-2v-6H5v-2z'/></svg>\n              </div>\n              <span>\n                Start a new campaign\n              </span>\n            </Link>\n          )}\n        </div>\n      </div>\n      <div className='contributions'>\n        <h2 className='h2'>\n          {+userAddress === +address ? 'Your contributions' : 'Public contributions'}\n          <span>({receipts.length})</span>\n        </h2>\n        <div className='projects'>\n          {receipts.map(p => {\n            const link = '/' + p.description?.split('/').slice(3).join('/')\n            return (\n              <Link to={link} className={`a Project plain ${+address === +p.creator && 'mine'}`} key={p.id}>\n                {!dataImgs[p.project.id]\n                  ? <object data={p.image} type='image/svg+xml' className='object' aria-label={p.title} />\n                  : <img src={p.image.replace(p.project.image, dataImgs[p.project.id])} className='img image' alt={p.title} />}\n              </Link>\n            )\n          })}\n          {+userAddress === +address && (\n            <Link to={`/${chainId}`} className='new'>\n              <div>\n                <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' height={16}><path fill='none' d='M0 0H24V24H0z'/><path fill='currentColor' d='M6 3c3.49 0 6.383 2.554 6.913 5.895C14.088 7.724 15.71 7 17.5 7H22v2.5c0 3.59-2.91 6.5-6.5 6.5H13v5h-2v-8H9c-3.866 0-7-3.134-7-7V3h4zm14 6h-2.5c-2.485 0-4.5 2.015-4.5 4.5v.5h2.5c2.485 0 4.5-2.015 4.5-4.5V9zM6 5H4v1c0 2.761 2.239 5 5 5h2v-1c0-2.761-2.239-5-5-5z'/></svg>\n              </div>\n              <span>\n                Explore projects\n              </span>\n            </Link>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Profile\n","import React from 'react'\nimport { createRoot } from 'react-dom/client'\nimport { HashRouter, Routes, Route, Navigate } from 'react-router-dom'\nimport App from './App'\nimport Explorer from './pages/Explorer'\nimport ProjectInfo from './pages/ProjectInfo'\nimport Profile from './pages/Profile'\n\nconst container = document.getElementById('root')\nconst root = createRoot(container)\nroot.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Routes>\n        <Route path='/'>\n          <Route index element={<Navigate to='/42220' replace />} />\n          <Route path=':chainId' element={<App />}>\n            <Route index element={<Explorer />} />\n            <Route path='new' element={<ProjectInfo create />} />\n            <Route path=':projectId' element={<ProjectInfo />} />\n            <Route path='user/:userAddress' element={<Profile />} />\n          </Route>\n        </Route>\n      </Routes>\n    </HashRouter>\n  </React.StrictMode>\n)\n","import { useCallback, useEffect, useState } from 'react'\nimport { useCelo } from '@celo/react-celo'\nimport * as ipfsClient from 'ipfs-http-client'\nimport { ethers } from 'ethers'\nimport DitherJS from 'ditherjs'\nimport contractAddresses from '../contracts/contract-address.json'\nimport Contract from '../contracts/Contract.json'\nimport CUSD from '../contracts/CUSD.json'\n\nexport const getContract = chainId => contractAddresses[chainId]\nexport const getAbi = () => Contract.abi\nexport const getNetwork = chainId => ({\n  1337: {\n    name: 'Localhost',\n    rpcUrl: 'http://localhost:8545',\n    subgraph: 'http://localhost:8000/subgraphs/name/yip-theodore/qavah',\n  },\n  44787: {\n    name: 'Alfajores',\n    rpcUrl: 'https://alfajores-forno.celo-testnet.org',\n    explorer: 'https://alfajores-blockscout.celo-testnet.org',\n    subgraph: 'https://api.thegraph.com/subgraphs/name/yip-theodore/qavah',\n  },\n  42220: {\n    name: 'Celo',\n    rpcUrl: 'https://forno.celo.org',\n    explorer: 'https://explorer.celo.org',\n    subgraph: 'https://api.studio.thegraph.com/query/77108/qavah-celo-mainnet/version/latest',\n  }\n})[chainId]\n\nexport const ipfs = ipfsClient.create({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https',\n  headers: {\n    authorization: 'Basic ' + Buffer.from('2DKuHQyhrxZg8pQ0qFDS2P1zbhA:1c5a77a8f113de65fe662e53288a883e').toString('base64'),\n  },\n})\n\nexport const useContract = (chainId) => {\n  const { address, kit } = useCelo()\n  const [ contract, setContract ] = useState(null)\n  const [ cUSD, setCUSD ] = useState(null)\n  const [ balance, setBalance ] = useState(null)\n\n  const fetchBalance = useCallback(async (erc20) => {\n    const balance = await erc20.methods.balanceOf(address).call()\n    setBalance(parseFloat(ethers.utils.formatUnits(balance, 18)).toFixed(2))\n  }, [ address ])\n\n  useEffect(() => {\n    if (address) {\n      window.contract = new kit.connection.web3.eth.Contract(\n        getAbi(),\n        getContract(chainId),\n      )\n      setContract(window.contract)\n      window.contract.methods.usdTokenAddress(\n      ).call().then(usdTokenAddress => {\n        const cUSD = new kit.connection.web3.eth.Contract(\n          CUSD.abi,\n          usdTokenAddress,\n        )\n        fetchBalance(cUSD)\n        setCUSD(cUSD)\n      })\n    }\n  }, [ address, chainId, fetchBalance, kit.connection.web3.eth.Contract ])\n\n\n  return { address, contract, balance, cUSD, fetchBalance }\n}\n\nexport async function onFileSelected (event, setImg) {\n  var selectedFile = event.target.files[0]\n  var reader = new FileReader()\n  if (!selectedFile) return\n\n  const img = document.createElement('img')\n  img.className = 'img'\n  img.width = 640\n  img.height = 360\n  img.title = selectedFile.name\n  document.body.appendChild(img)\n\n  const ditherjs = new DitherJS({\n    step: 1,\n    palette: [[0, 0, 0], [255, 255, 255]],\n    algorithm: 'atkinson' // one of ['ordered', 'diffusion', 'atkinson']\n  })\n  reader.onload = function (event) {\n    img.onload = async () => {\n      ditherjs.dither(img)\n      const canvas = document.querySelector('canvas:last-child')\n      const ctx = canvas.getContext('2d')\n      const imgData = ctx.getImageData(0, 0, canvas.width, canvas.height)\n      for (var i = 0; i < imgData.data.length; i += 4) {\n        if (imgData.data[i + 0]) {\n          imgData.data[i + 0] = 251\n          imgData.data[i + 1] = 204\n          imgData.data[i + 2] = 92\n        } else {\n          imgData.data[i + 0] = 97\n          imgData.data[i + 1] = 31\n          imgData.data[i + 2] = 105\n        }\n      }\n      const canvas1 = document.createElement('canvas')\n      canvas1.className = 'canvas'\n      const ctx1 = canvas1.getContext('2d')\n      canvas1.width = canvas.width\n      canvas1.height = canvas.height\n      ctx1.putImageData(imgData, 0, 0)\n      setImg({\n        dataUrl: canvas1.toDataURL(),\n        blob: await new Promise(resolve => canvas1.toBlob(resolve)),\n        width: canvas1.width,\n        height: canvas1.height,\n      })\n    }\n    img.src = event.target.result\n  }\n  reader.readAsDataURL(selectedFile)\n}\n\nexport const escapeHtml = (unsafe) => {\n  return unsafe.replaceAll('&', '&amp;').replaceAll('<', '&lt;').replaceAll('>', '&gt;').replaceAll('\"', '&quot;').replaceAll(\"'\", '&#039;').replaceAll('#', '%23')\n}\n"],"sourceRoot":""}